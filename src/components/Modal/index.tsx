import { useModal } from "../../hooks/useModal.ts";
import {
  ModalStyles,
  ModalContentStyles,
  CloseBtn,
  StyledConnect,
  StyledSubDescription,
  StyledUl,
  Span,
} from "./styled.ts";
import { useState } from "react";
import { ContactType, getDate, initContact } from "../../helper";
import { useNavigate } from "react-router-dom";
import { token } from "../../consts";

const Modal = () => {
  const [user, setUser] = useState<string>();
  const [phone, setPhone] = useState<string>();
  const [isShowSuggestion, _] = useState(false);
  const [loading, setLoading] = useState(false);

  const [contacts, setContacts] = useState<ContactType>(initContact);

  const { closeModal, isOpen, type } = useModal();
  const navigate = useNavigate();

  const sendOrder = async (e: any) => {
    e.preventDefault();

    try {
      const obj = {
        // chat_id: "518174528", // home
        chat_id: "-4545168563", // work
        text: `
üìÜ ${getDate()}
${type}
üë®‚Äçü¶∞–ò–º—è: ${user}
üíª–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä: 
${contacts.WatsApp ? "WatsApp" : ""}
${contacts.Telegram ? "Telegram" : ""}
üìû–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}

`,
      };
      setLoading(true);
      await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(obj),
      });

      setLoading(false);
      closeModal();
      setContacts(initContact);
      setUser("");
      setPhone("");
      navigate("/thanks");
    } catch (err) {
      console.error(err);
    }
  };

  const handleClick = (value: string) => {
    setContacts((prevState) => ({
      ...prevState,
      [value]: !contacts[value],
    }));
  };
  return (
    <ModalStyles
      $isOpen={isOpen ? "true" : "false"}
      onClick={() => closeModal()}
    >
      <ModalContentStyles onClick={(e) => e.stopPropagation()}>
        <CloseBtn onClick={() => closeModal()}>X</CloseBtn>
        {loading ? (
          <div style={{ paddingTop: 50 }}>–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å ...</div>
        ) : isShowSuggestion ? (
          <div>
            <h2>–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!</h2>
            <p>–Ø —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é</p>
          </div>
        ) : (
          <>
            <h2>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</h2>
            <p>—Å –æ–Ω–ª–∞–π–Ω —Ç—Ä–µ–Ω–µ—Ä–æ–º!</p>
            <StyledSubDescription>
              –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã, —á—Ç–æ–±—ã:
            </StyledSubDescription>
            <StyledUl>
              <li>–ò—Å–ø—ã—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º</li>
              <li>–ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫—É –≤–∞—à–µ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏</li>
              <li>–ù–∞—á–∞—Ç—å –ø—É—Ç—å –∫ —Å–≤–æ–∏–º —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª—è–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</li>
            </StyledUl>
            <form onSubmit={sendOrder}>
              <input
                placeholder="–í–∞—à–µ –∏–º—è"
                required
                value={user}
                onChange={(e) => setUser(e.target.value)}
              />
              <input
                placeholder="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞—è —Å +)"
                required
                value={phone}
                onChange={(e) => setPhone(e.target.value)}
              />
              <StyledSubDescription>
                –ì–¥–µ —Å –≤–∞–º–∏ —É–¥–æ–±–Ω–µ–µ —Å–≤—è–∑–∞—Ç—å—Å—è
              </StyledSubDescription>
              <StyledConnect>
                <Span
                  $active={contacts["WatsApp"]}
                  onClick={() => handleClick("WatsApp")}
                >
                  WhatsApp
                </Span>
                <Span
                  $active={contacts["Telegram"]}
                  onClick={() => handleClick("Telegram")}
                >
                  Telegram
                </Span>
              </StyledConnect>

              <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
            </form>
          </>
        )}
      </ModalContentStyles>
    </ModalStyles>
  );
};

export default Modal;
